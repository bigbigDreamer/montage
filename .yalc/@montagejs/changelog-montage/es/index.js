import j from"execa";import A from"os";import C from"path";import H from"path-is-absolute";function L(t,a,n,o,e,i,u){try{var c=t[i](u),r=c.value}catch(f){n(f);return}c.done?a(r):Promise.resolve(r).then(o,e)}function O(t){return function(){var a=this,n=arguments;return new Promise(function(o,e){var i=t.apply(a,n);function u(r){L(i,o,e,u,c,"next",r)}function c(r){L(i,o,e,u,c,"throw",r)}u(void 0)})}}function I(t,a){if(t==null)return{};var n={},o=Object.keys(t),e,i;for(i=0;i<o.length;i++)e=o[i],!(a.indexOf(e)>=0)&&(n[e]=t[e]);return n}var k=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function K(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var w={exports:{}},b={exports:{}};(function(t,a){Object.defineProperty(a,"__esModule",{value:!0});var n=j,o=f(n),e=A,i=C,u=f(i),c=H,r=f(c);function f(l){return l&&l.__esModule?l:{default:l}}var d=process.cwd(),p=function(){var m=arguments.length>0&&arguments[0]!==void 0?arguments[0]:d,s=(0,r.default)(m)?m:u.default.join(d,m);try{return(0,e.platform)()==="win32"?o.default.shellSync("pushd "+s+" & git status"):o.default.shellSync("(cd "+s+" ; ([ -d .git ] && echo .git) || git rev-parse --git-dir 2> /dev/null)"),!0}catch{return!1}};a.default=p,t.exports=a.default})(b,b.exports),function(t,a){var n=k&&k.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(a,"__esModule",{value:!0});var o=n(j),e=n(b.exports),i=n(C),u=/\s+([\s\S]*)/g,c=function(r){var f,d,p,l;r===void 0&&(r={});var m=r.cwd,s=m===void 0?process.cwd():m,v=r.commit,q=v||"",D=i.default.resolve(s);if(!e.default(D))return{};try{var x=o.default.commandSync("git --no-pager show "+q+" --summary",{cwd:s}).stdout,g=x.split(`
`).filter(function(h){return h.length!==0}),_=((f=g[1])===null||f===void 0?void 0:f.indexOf("Merge"))===-1?0:1,y=(new RegExp(u).exec(g[0])||[])[1],P=y.slice(0,7),$=function(h){var T=new RegExp(u).exec(g[h])||[],F=T[1];return F},M=(p=(((d=$(1+_))===null||d===void 0?void 0:d.match(/([^<]+)/))||[])[1])===null||p===void 0?void 0:p.trim(),R=((l=$(1+_))===null||l===void 0?void 0:l.match(/<([^>]+)>/))||[],S=R[1],G=$(2+_),E=x.split(`

`)[1].trim();return{hash:y,shortHash:P,commit:y,shortCommit:P,author:M,email:S,date:G,message:E}}catch(h){return{error:h}}};a.default=c,t.exports=a.default}(w,w.exports);var V=K(w.exports);const W=O(function*(t,a,n){if(!n||!n.repo)throw new Error(`Please provide a repo to this changelog generator like this:
"changelog": ["@changesets/changelog-github", { "repo": "org/repo" }]`);const o=V(),{shortHash:e}=o,i=I(o,["shortHash"]);console.log(e,i,"res");let u,c=[n.author];const r=t.summary.replace(/^\s*(?:pr|pull|pull\s+request):\s*#?(\d+)/im,(s,v)=>"").replace(/^\s*commit:\s*([^\s]+)/im,(s,v)=>(u=e||v,"")).trim(),[f,...d]=r.split(`
`).map(s=>s.trimRight()),p={commit:`[\`${u}\`](https://github.com/${n.repo}/commit/${u})`},l=c.map(s=>`[@${s}](https://github.com/${s})`).join(", "),m=[p.commit===null?"":` ${p.commit}`,l===null?"":` Thanks ${l}!`].join("");return`

-${m?`${m} -`:""} ${f}
${d.map(s=>`  ${s}`).join(`
`)}`}),z=O(function*(t,a){if(a.length===0)return"";const n=t.map(e=>`- Updated dependencies${e.commit?` [${e.commit}]`:""}`),o=a.map(e=>`  - ${e.name}@${e.newVersion}`);return[...n,...o].join(`
`)}),B={getReleaseLine:W,getDependencyReleaseLine:z};export{B as default};
//# sourceMappingURL=index.js.map
